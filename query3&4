Usage of 'use strict'

The purpose of "use strict" is to indicate that the code should be executed in "strict mode". With strict mode, you can not, for example, use undeclared variables. 
Strict mode is declared by adding "use strict"; to the beginning of a script or a function.
Declared at the beginning of a script, it has global scope (all code in the script will execute in strict mode)
Strict mode makes it easier to write "secure" JavaScript.
Strict mode changes previously accepted "bad syntax" into real errors.
As an example, in normal JavaScript, mistyping a variable name creates a new global variable. In strict mode, this will throw an error, making it impossible to accidentally create a global variable.
In normal JavaScript, a developer will not receive any error feedback assigning values to non-writable properties.
In strict mode, any assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object, will throw an error.
Using a variable, without declaring it, is not allowed:
Using an object, without declaring it, is not allowed:
Deleting a variable (or object) is not allowed.
Deleting a function is not allowed.
Duplicating a parameter name is not allowed:
Octal numeric literals are not allowed:
Octal escape characters are not allowed:
Writing to a read-only property is not allowed:
Writing to a get-only property is not allowed:
Deleting an undeletable property is not allowed:
The word eval cannot be used as a variable:
The word arguments cannot be used as a variable:
The with statement is not allowed:
The this keyword in functions behaves differently in strict mode.
The this keyword refers to the object that called the function.
If the object is not specified, functions in strict mode will return undefined and functions in normal mode will return the global object (window):

Noscript tag:
The <noscript> tag defines an alternate content for users that have disabled scripts in their browser or have a browser that doesn't support script.
The <noscript> element can be used in both <head> and <body>.
When used inside the <head> element: <noscript> must contain only <link>, <style>, and <meta> elements.
The content inside the <noscript> element will be displayed if scripts are not supported, or are disabled in the user's browser.
In HTML 4.01, the <noscript> tag can only be used inside the <body> element.
In HTML5, the <noscript> tag can be used both inside <head> and <body>.
